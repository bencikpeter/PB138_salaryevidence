package GUI;

// database imports
import Database.DatabaseFailureException;
import Database.Day;


import java.awt.Color;
import java.awt.Component;
import java.io.*;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Main GUI
 * @author Tomáš Ježek
 */
public class BasicFrame extends javax.swing.JFrame {

    /**
     * Localisation
     */
    private static final ResourceBundle bundle = ResourceBundle.getBundle("GUI/Bundle");
    /**
     *  Date format in GUI
     */
    private static final SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
    /**
     *  Database manager
     */
    private static final Database.DatabaseManager databaseManager = new Database.DatabaseManagerImpl();
    
    /**
     * Creates new form BasicFrame
     */
    public BasicFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PDF_FileChooser = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Add_Button = new javax.swing.JButton();
        Quit_Button1 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        From_Label = new javax.swing.JLabel();
        FromDate_Spinner = new javax.swing.JSpinner();
        To_Label = new javax.swing.JLabel();
        ToDate_Spinner = new javax.swing.JSpinner();
        DocBook_Button = new javax.swing.JButton();
        PDF_Button = new javax.swing.JButton();
        Quit_Button2 = new javax.swing.JButton();

        PDF_FileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("GUI/Bundle"); // NOI18N
        PDF_FileChooser.setDialogTitle(bundle.getString("PDF_EXPORT")); // NOI18N
        javax.swing.filechooser.FileFilter filter = new javax.swing.filechooser.FileNameExtensionFilter(bundle.getString("PDF_FILE_DESCRIPTION"),"pdf");
        PDF_FileChooser.setFileFilter(filter);
        PDF_FileChooser.setDragEnabled(true);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText(bundle.getString("ADD_TOOLTIP")); // NOI18N

        jToggleButton1.setText("OK");

        jButton1.setText("Cancel");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        // Dnesni datum
        //DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        Date date = new Date();
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {formatter.format(date), 8, null} // null, aby se omylem nepridaval placeholder
            },
            new String [] {
                bundle.getString("DATE"), bundle.getString("HOURS"), bundle.getString("JOB")
            }
        ));
        jTable1.setToolTipText("");
        jTable1.setRowHeight(24);
        jScrollPane1.setViewportView(jTable1);
        // Datum prvniho sloupce
        DefaultTableCellRenderer renderer1 = new DefaultTableCellRenderer();
        renderer1.setToolTipText(bundle.getString("TABLE_TOOLTIP1"));
        jTable1.getColumnModel().getColumn(0).setCellRenderer(renderer1);
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DateCellEditor(new JTextField()));
        // Hodiny druheho sloupce
        DefaultTableCellRenderer renderer2 = new DefaultTableCellRenderer();
        renderer2.setToolTipText(bundle.getString("TABLE_TOOLTIP2"));
        jTable1.getColumnModel().getColumn(1).setCellRenderer(renderer2);
        jTable1.getColumnModel().getColumn(1).setCellEditor(new HoursCellEditor(new JTextField()));
        //jTable1.getColumnModel().getColumn(1).setCellEditor(new DateCellEditor(new JTextField(), "kk"));
        // Enum tretiho sloupce
        JComboBox comboBox = new JComboBox();
        comboBox.addItem(""); // empty input
        for (Jobs job : Jobs.values()) {
            comboBox.addItem(job.toString());
            // prace se bere z Resource bundle
        }
        DefaultTableCellRenderer renderer3 = new DefaultTableCellRenderer();
        renderer3.setToolTipText(bundle.getString("TABLE_TOOLTIP3"));
        jTable1.getColumnModel().getColumn(2).setCellRenderer(renderer3);
        jTable1.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(comboBox));

        Add_Button.setText(bundle.getString("ADD")); // NOI18N
        Add_Button.setToolTipText(bundle.getString("ADD_TOOLTIP")); // NOI18N
        Add_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Add_ButtonMousePressed(evt);
            }
        });

        Quit_Button1.setText(bundle.getString("QUIT")); // NOI18N
        Quit_Button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Quit_Button21MouseClicked(evt);
            }
        });

        jToggleButton2.setText(bundle.getString("ADD_ROW")); // NOI18N
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jToggleButton2MousePressed(evt);
            }
        });

        jToggleButton3.setText(bundle.getString("REMOVE_ROW")); // NOI18N
        jToggleButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jToggleButton3MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Add_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Quit_Button1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton2)
                            .addComponent(jToggleButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Quit_Button1))
                    .addComponent(Add_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("NEW"), jPanel1); // NOI18N

        From_Label.setText(bundle.getString("FROM")); // NOI18N

        FromDate_Spinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1451602800000L), null, new java.util.Date(), java.util.Calendar.DAY_OF_YEAR));
        FromDate_Spinner.setEditor(new javax.swing.JSpinner.DateEditor(FromDate_Spinner, formatter.toPattern()));
        FromDate_Spinner.setToolTipText(bundle.getString("TOOLTIP_FROM")); // NOI18N
        FromDate_Spinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        To_Label.setText(bundle.getString("TO")); // NOI18N

        ToDate_Spinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.DAY_OF_YEAR));
        ToDate_Spinner.setEditor(new javax.swing.JSpinner.DateEditor(ToDate_Spinner, formatter.toPattern()));
        ToDate_Spinner.setToolTipText(bundle.getString("TOOLTIP_TO")); // NOI18N

        DocBook_Button.setText(bundle.getString("DOCBOOK")); // NOI18N
        DocBook_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DocBook_ButtonMouseClicked(evt);
            }
        });

        PDF_Button.setText(bundle.getString("PDF")); // NOI18N
        PDF_Button.setToolTipText(bundle.getString("PDF_EXPORT")); // NOI18N
        PDF_Button.setActionCommand(bundle.getString("PDF")); // NOI18N
        PDF_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PDF_ButtonMouseClicked(evt);
            }
        });

        Quit_Button2.setText(bundle.getString("QUIT")); // NOI18N
        Quit_Button2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Quit_Button21MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(DocBook_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Quit_Button2)
                                .addGap(3, 3, 3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(PDF_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(From_Label)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(FromDate_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(To_Label)
                                    .addComponent(ToDate_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(182, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(From_Label)
                    .addComponent(To_Label))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FromDate_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToDate_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DocBook_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PDF_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(Quit_Button2)
                .addGap(4, 4, 4))
        );

        jTabbedPane1.addTab(bundle.getString("GENERATE"), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
            
    /** 
     * Button to exit the application
     * @param evt Mouse click on Quit button
     */
    private void Quit_Button21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Quit_Button21MouseClicked
            System.exit(0);
    }//GEN-LAST:event_Quit_Button21MouseClicked
    
    /**
     * Button to export data from the selected range as PDF
     * @param evt Mouse click on PDF button
     */
    private void PDF_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PDF_ButtonMouseClicked
        
        saveTextToFile("Text to save as PDF", "pdf", PDF_FileChooser);       
        
    }//GEN-LAST:event_PDF_ButtonMouseClicked
    /**
     * Button to export data from the selected range as DocBook
     * @param evt Mouse click on DocBook buttom
     */
    private void DocBook_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DocBook_ButtonMouseClicked
        saveTextToFile("Text to save as DocBook", "xml");
        
    }//GEN-LAST:event_DocBook_ButtonMouseClicked
    
    /**
     * Button for saving values to database (checks for full row) 
     * @param evt Mouse pressed
     */
    private void Add_ButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Add_ButtonMousePressed
        if (jTable1.getModel().getColumnCount() != 3) { 
            Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, "Incorrect table column count.");            
            return;
        }
        if (jTable1.getModel().getRowCount() == 0) { 
            // All rows deleted by user            
            return;
        }

        for (int row = 0; row < jTable1.getModel().getRowCount(); row++) {
            
            Day day = new Day();            
            
            if (jTable1.getModel().getValueAt(row, 0) == null || 
                    jTable1.getModel().getValueAt(row, 0).equals("") ||
                jTable1.getModel().getValueAt(row, 1) == null || 
                    jTable1.getModel().getValueAt(row, 1).equals("") ||
                jTable1.getModel().getValueAt(row, 2) == null || 
                    jTable1.getModel().getValueAt(row, 2).equals("")) {
                    
                // empty cell in a row -> skip
                    continue;
            }
            
            // ►►► DATE
            Long dateCell = getTableDate(jTable1, row, 0, formatter);
            if (dateCell == null) continue; // Exception logged inside method
            day.setDate(dateCell);

            // ►►► HOURS
            Integer hoursCell = Integer.valueOf(jTable1.getModel().getValueAt(row, 1).toString());
            day.setHours(hoursCell);
            
            // ►►► JOB
            Jobs job;
            String jobCell = jTable1.getModel().getValueAt(row, 2).toString();
            String enumString = getBundleKey(bundle, jobCell).replace("JOBS_", "");
            job = Jobs.valueOf(enumString);    
            day.setJob(job); 
            
            // COMPLETED ROW => add Day
            try {                
                databaseManager.createRecord(day);   
            } catch (DatabaseFailureException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, "Error when saving to database\n", ex);
    // ♦♦♦ TEMP
            } catch (UnsupportedOperationException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.WARNING, "Adding to database currently not supported\n");
                continue;
            }
            
        } // <- for all rows
    }//GEN-LAST:event_Add_ButtonMousePressed
    
    /**
     * Returns date from a table cell in unix format
     * @param table Table to get date from
     * @param row Cell row coordinate
     * @param col Cell column coordinate
     * @param formatter Date formatter
     * @return Long table representation, null if date is in incorrect format
     */
    private Long getTableDate(JTable table, int row, int col, SimpleDateFormat formatter) {
        Date date;
            try {                               
                date = formatter.parse(table.getModel().getValueAt(row, col).toString());                
            } catch (ParseException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, "Wrong date format", ex);
                return null;
            }
            Long dateCell = date.getTime()/1000; // UNIX DATE 
            return dateCell;
    }
    
    /**
     * Returns matching ResourceBundle key from localised string
     * @param bundle ResourceBundle to look in
     * @param locText localised string
     * @return ResourceBundle key or 'null' if no such text exists
     */   
    private String getBundleKey(ResourceBundle bundle, String locText) {
        for (Enumeration<String> keys = bundle.getKeys(); keys.hasMoreElements(); ) {
                String key = keys.nextElement();
                if (bundle.getString( key ).equals(locText)) {
                     return key;                     
                }
        }
        Logger.getLogger(BasicFrame.class.getName()).log(Level.WARNING, "No key for text \"{0}\" exists", locText);
        return null;
    }
    
    /**
     * Add main table row
     * @param evt Mouse pressed
     */
    private void jToggleButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MousePressed
        Date date = new Date(); // today's dates
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{formatter.format(date), 8, ""});
    }//GEN-LAST:event_jToggleButton2MousePressed
    /**
     * Remove main table row
     * @param evt Mouse pressed
     */
    private void jToggleButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton3MousePressed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(model.getRowCount()-1);
    }//GEN-LAST:event_jToggleButton3MousePressed
        
    /**
     * Function saving given text in a freshly created file of specified format     
     * @param saved_text Text to be saved inside a new file
     * @param extension Extension of created file without dot (default "txt")
     * @param fileChooser FileChooser to use to handle user input. A default one is used if null.
     */
    private void saveTextToFile (String saved_text, String extension, javax.swing.JFileChooser fileChooser) {
        if (fileChooser == null) fileChooser = new javax.swing.JFileChooser();
        if (extension == null) extension = "txt";        
        int actionDialog = fileChooser.showSaveDialog(this);        
        //fileChooser.setCurrentDirectory(new File( "./"));        
        if (actionDialog == javax.swing.JFileChooser.APPROVE_OPTION)
        {            
            File fileName = new File( fileChooser.getSelectedFile() + "." + extension );
            
            if (fileName.exists())
            {
                actionDialog = javax.swing.JOptionPane.showConfirmDialog(this, bundle.getString("REPLACE_FILE"));
                // CANCEL
                if (actionDialog == javax.swing.JOptionPane.NO_OPTION)
                    return;
            }
            // Write file
            BufferedWriter outFile = null;
            try {
                outFile = new BufferedWriter( new FileWriter( fileName ) );
            } catch (IOException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                outFile.write(saved_text); // ►►►
            } catch (IOException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                outFile.flush();
                outFile.close();
            } catch (IOException ex) {
                Logger.getLogger(BasicFrame.class.getName()).log(Level.SEVERE, null, ex);
            }            
           }        
    }
    /**
     * Saves file of chosen type using the default JFileChooser
     * @param saved_text Text to be saved inside the new file
     * @param extension Extension of created file without dot (default "txt")
     */
    private void saveTextToFile (String saved_text, String extension) {
        javax.swing.JFileChooser FFF = new javax.swing.JFileChooser();
        saveTextToFile(saved_text, extension, FFF);
    }
    
    
    /**
     * Cell Editor for Hours column which requies an integer value between 1 and 24
     * 
     */
    private static class HoursCellEditor extends DefaultCellEditor {

        private static final Border red = new LineBorder(Color.red);
        private static final Border black = new LineBorder(Color.black);
        private JTextField textField;
        
        /**
         * Constructor for 1-24 integer text field
         * @param textField 
         */
        public HoursCellEditor(JTextField textField) {
            super(textField);
            this.textField = textField;
            this.textField.setHorizontalAlignment(JTextField.RIGHT);
        }
        
        /**
         * Event listener when user finishes entering input
         * Validation check for 1-24 integer value in table cell
         * @return 
         */
        @Override
        public boolean stopCellEditing() {
            if (textField.getText().equals("")) return super.stopCellEditing(); // empty input
            try {
                int v = Integer.valueOf(textField.getText());
                if (v < 1 || v > 24) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) { // incorrect input
                textField.setBorder(red);
                return false;
            }
            return super.stopCellEditing();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table,
            Object value, boolean isSelected, int row, int column) {
            textField.setBorder(black);
            return super.getTableCellEditorComponent(
                table, value, isSelected, row, column);
        }
    }
    /**
     * Cell Editor for Data column
     * 
     */
    private static class DateCellEditor extends DefaultCellEditor {

        private static final Border red = new LineBorder(Color.red);
        private static final Border black = new LineBorder(Color.black);
        private final JTextField textField;
        private final String format;
        
        /**
         * Constructor for date based text field inside table cells
         * with default format
         * @param textField Table cell
         */
        public DateCellEditor(JTextField textField) {
            super(textField);
            this.textField = textField;
            this.textField.setHorizontalAlignment(JTextField.RIGHT);
            this.format = formatter.toPattern();
        }
        /**
         * Constructor for date based text field inside table cells 
         * with custom format 
         * @param textField Table cell
         * @param format Date format
         */
        public DateCellEditor(JTextField textField, String format) {
            super(textField);
            this.textField = textField;
            this.textField.setHorizontalAlignment(JTextField.RIGHT);
            this.format = format;
        }
        
        /**
         * Event listener and validation check when user finished entering input
         * @return true (= accept input) if it's correct or empty
         */
        @Override
        public boolean stopCellEditing() {
            if (textField.getText().equals("")) return super.stopCellEditing(); // empty input
            SimpleDateFormat formatter = new SimpleDateFormat(this.format);
            formatter.setLenient(false);
            try {
                formatter.parse(textField.getText()); // .trim() ?
            } catch (java.text.ParseException e) { // incorect input
                textField.setBorder(red);                                                
                return false;
            }
            // Date later than today check here?            
            return super.stopCellEditing();
        }
        
 
        @Override
        public Component getTableCellEditorComponent(JTable table,
            Object value, boolean isSelected, int row, int column) {
            textField.setBorder(black);
            return super.getTableCellEditorComponent(
                table, value, isSelected, row, column);
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (bundle.getString("NIMBUS").equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                new BasicFrame().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Button;
    private javax.swing.JButton DocBook_Button;
    private javax.swing.JSpinner FromDate_Spinner;
    private javax.swing.JLabel From_Label;
    private javax.swing.JButton PDF_Button;
    private javax.swing.JFileChooser PDF_FileChooser;
    private javax.swing.JButton Quit_Button1;
    private javax.swing.JButton Quit_Button2;
    private javax.swing.JSpinner ToDate_Spinner;
    private javax.swing.JLabel To_Label;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables
}
